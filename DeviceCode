// MIT License
//
// Copyright 2017 Electric Imp
//
// SPDX-License-Identifier: MIT
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO
// EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES
// OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.

// Temperature Humidity sensor Library
#require "HTS221.device.lib.nut:2.0.1"
// MEMS accelerometer sensor Library
#require "LIS3DH.device.lib.nut:2.0.0"
// MEMS absolute pressure sensor Library
#require "LPS22HB.device.lib.nut:2.0.0"

// Class to configure and take readings from Explorer Kit sensors.
// Take readings from temperature humidity and light sensors.
// Use the light level to determine if the door is open (true or false)
// and send the door status, temperature and humidity to the agent 
class SmartFridge {

    // Time in seconds to wait between readings
    static READING_INTERVAL_SEC = 10;//600;

    // The lx level at which we know the door is open
    static LX_THRESHOLD = 25000;

    // Accel i2c Address
    static LIS3DH_ADDR = 0x32;
    // Accel settings
    static ACCEL_DATARATE = 100;
    // High Sensitivity set, so we alway wake on a door event
    static ACCEL_THRESHOLD = 0.1;
    static ACCEL_DURATION = 1;

    // Class instances
    tempHumid = null;
    pressTemp = null;
    accel = null;

    alertPin = null;


    constructor() {
        // Power save mode will reduce power consumption when the 
        // radio is idle. This adds latency when sending data. 
        imp.setpowersave(true);
        initializeSensors();
    }

    function run() {
        // Set up the reading table with a timestamp
        local reading = { "Timestamp" : time() };
        
        // Add temperature and humidity readings
        local result = tempHumid.read();
        if ("temperature" in result) reading.Temperature <- result.temperature;
        if ("humidity" in result) reading.Humidity <- result.humidity;
        server.log(format("Current Humidity: %0.2f %s, Current Temperature: %0.2f °C", 
        result.humidity, "%", result.temperature));
        
        local result = pressTemp.read();
        if ("pressure" in result) reading.Pressure <- result.pressure;
        if ("temperature" in result) reading.Temperature <- result.temperature;
        server.log(format("Current Pressure: %0.2f hPa, Current Temperature: %0.2f °C",
        result.pressure, result.temperature));
        
        
        local result = accel.getAccel();
        //if ("pressure" in result) reading.Temperature <- result.pressure;
        //if ("temperature" in result) reading.Temperature <- result.temperature;
        server.log(format("Acceleration (G): (%0.2f, %0.2f, %0.2f)",
        result.x, result.y, result.z));
        if ("x" in result) reading.AccelX <- result.x;
        if ("y" in result) reading.AccelY <- result.y;
        if ("x" in result) reading.AccelZ <- result.z;
        
        // Check door status using internal LX sensor to 
        // determine if the door is open
        local currentLight = hardware.lightlevel();
        server.log(format("Current light level is: %0.2f LUX",
        currentLight));
        reading.doorOpen <- (currentLight > LX_THRESHOLD);
        server.log(format("Door open: " + reading.doorOpen));

        // Send readings to the agent
        agent.send("reading", reading);

        // Schedule the next reading
        imp.wakeup(READING_INTERVAL_SEC, run.bindenv(this));
    }

    function initializeSensors() {
        // Configure i2c
        local i2c = hardware.i2c89;
        i2c.configure(CLOCK_SPEED_400_KHZ);

        // Initialize sensors
        tempHumid = HTS221(i2c);
        pressTemp = LPS22HB(i2c);
        accel = LIS3DH(i2c, LIS3DH_ADDR);

        // Configure sensor to take readings
        tempHumid.setMode(HTS221_MODE.ONE_SHOT); 
        pressTemp.setMode(LPS22HB_MODE.ONE_SHOT);
        accel.setMode(LIS3DH_MODE_NORMAL);
        accel.setDataRate(ACCEL_DATARATE);
    }
}

// RUNTIME 
// ---------------------------------------------------
server.log("Device running...");

// Initialize application
fridge <- SmartFridge();

// Start reading loop
fridge.run();
